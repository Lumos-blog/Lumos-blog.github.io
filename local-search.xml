<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/11/14/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5Dxx/"/>
    <url>/2022/11/14/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5Dxx/</url>
    
    <content type="html"><![CDATA[<h1 id="BUU-2019红帽杯-xx"><a href="#BUU-2019红帽杯-xx" class="headerlink" title="BUU [2019红帽杯]xx"></a>BUU [2019红帽杯]xx</h1><p>无壳，64位可执行程序，拖进IDA分析</p><p>直接放上分析过的</p><p><img src="//tva2.sinaimg.cn/large/0081aNtNly1h84zbeb790j30s00h1jyp.jpg" alt="main1"></p><p><img src="//tva3.sinaimg.cn/large/0081aNtNly1h84zda375vj30rz0jhtgf.jpg" alt="main2"></p><p><img src="//tva1.sinaimg.cn/large/0081aNtNly1h84zeahygmj30rg04rju9.jpg" alt="main3"></p><p><img src="//tva4.sinaimg.cn/large/0081aNtNly1h84zfkuyq9j30p70gotfk.jpg" alt="main4"></p><p>这里只截取了主要部分，都在main函数中</p><p>最后这里提取加密完的数据的时候注意是小端，v31和v32也是我们需要的数据，可以看一下他们的位置，是连着的</p><p>异或操作这里分清每个变量是控制什么的就可以逆过来</p><p>直接呈上我的烂python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = [<br>    <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x9B</span>,<br>    <span class="hljs-number">0x20</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xC8</span>,<br>    <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xFA</span><br>]<br>data = enc<br>v21 = <span class="hljs-number">1</span><br><span class="hljs-comment"># print(len(enc))</span><br><span class="hljs-keyword">for</span> v21 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>    v23 = <span class="hljs-number">0</span><br>    tmp = v21 // <span class="hljs-number">3</span><br>    <span class="hljs-keyword">if</span> tmp &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">while</span> v23 &lt; tmp:<br>            data[v21] ^= data[v23]<br>            v23 += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(data)                  <span class="hljs-comment"># 到这里解决了异或操作</span><br>right_index = [<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>, <span class="hljs-number">11</span>, <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>, <span class="hljs-number">13</span>, <span class="hljs-number">18</span>, <span class="hljs-number">16</span>, <span class="hljs-number">19</span>, <span class="hljs-number">17</span>, <span class="hljs-number">22</span>, <span class="hljs-number">20</span>, <span class="hljs-number">23</span>, <span class="hljs-number">21</span>]<br>right_enc = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(enc)<br>tmp_index = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> right_index:<br>    right_enc[i] = <span class="hljs-built_in">hex</span>(data[tmp_index])<br>    tmp_index += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(right_enc)              <span class="hljs-comment"># 到这将打乱的密文还原到正确的顺序</span><br><br></code></pre></td></tr></table></figure><p>将异或解决后还有一步，上面的赋值操作并不是按顺序赋值的，我们要得到他的正确顺序，但是这里也有一个小坑，就是有一个赋值操作是在异或操作开始的for循环初始化变量的位置，不然我们会缺少一个数据</p><p>接下来我们进行xxtea解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><br>_DELTA = <span class="hljs-number">0x9E3779B9</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_long2str</span>(<span class="hljs-params">v, w</span>):<br>    n = (<span class="hljs-built_in">len</span>(v) - <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span> w:<br>        m = v[-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> (m &lt; n - <span class="hljs-number">3</span>) <span class="hljs-keyword">or</span> (m &gt; n): <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>        n = m<br>    s = struct.pack(<span class="hljs-string">&#x27;&lt;%iL&#x27;</span> % <span class="hljs-built_in">len</span>(v), *v)<br>    <span class="hljs-keyword">return</span> s[<span class="hljs-number">0</span>:n] <span class="hljs-keyword">if</span> w <span class="hljs-keyword">else</span> s<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_str2long</span>(<span class="hljs-params">s, w</span>):<br>    n = <span class="hljs-built_in">len</span>(s)<br>    m = (<span class="hljs-number">4</span> - (n &amp; <span class="hljs-number">3</span>) &amp; <span class="hljs-number">3</span>) + n<br>    s = s.ljust(m, <span class="hljs-string">&quot;\0&quot;</span>)<br>    v = <span class="hljs-built_in">list</span>(struct.unpack(<span class="hljs-string">&#x27;&lt;%iL&#x27;</span> % (m &gt;&gt; <span class="hljs-number">2</span>), s))<br>    <span class="hljs-keyword">if</span> w: v.append(n)<br>    <span class="hljs-keyword">return</span> v<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params"><span class="hljs-built_in">str</span>, key</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span> == <span class="hljs-string">&#x27;&#x27;</span>: <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span><br>    v = _str2long(<span class="hljs-built_in">str</span>, <span class="hljs-literal">True</span>)<br>    k = _str2long(key.ljust(<span class="hljs-number">16</span>, <span class="hljs-string">&quot;\0&quot;</span>), <span class="hljs-literal">False</span>)<br>    n = <span class="hljs-built_in">len</span>(v) - <span class="hljs-number">1</span><br>    z = v[n]<br>    y = v[<span class="hljs-number">0</span>]<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    q = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> // (n + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">while</span> q &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">sum</span> = (<span class="hljs-built_in">sum</span> + _DELTA) &amp; <span class="hljs-number">0xffffffff</span><br>        e = <span class="hljs-built_in">sum</span> &gt;&gt; <span class="hljs-number">2</span> &amp; <span class="hljs-number">3</span><br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> xrange(n):<br>            y = v[p + <span class="hljs-number">1</span>]<br>            v[p] = (v[p] + ((z &gt;&gt; <span class="hljs-number">5</span> ^ y &lt;&lt; <span class="hljs-number">2</span>) + (y &gt;&gt; <span class="hljs-number">3</span> ^ z &lt;&lt; <span class="hljs-number">4</span>) ^ (<span class="hljs-built_in">sum</span> ^ y) + (k[p &amp; <span class="hljs-number">3</span> ^ e] ^ z))) &amp; <span class="hljs-number">0xffffffff</span><br>            z = v[p]<br>        y = v[<span class="hljs-number">0</span>]<br>        v[n] = (v[n] + ((z &gt;&gt; <span class="hljs-number">5</span> ^ y &lt;&lt; <span class="hljs-number">2</span>) + (y &gt;&gt; <span class="hljs-number">3</span> ^ z &lt;&lt; <span class="hljs-number">4</span>) ^ (<span class="hljs-built_in">sum</span> ^ y) + (k[n &amp; <span class="hljs-number">3</span> ^ e] ^ z))) &amp; <span class="hljs-number">0xffffffff</span><br>        z = v[n]<br>        q -= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> _long2str(v, <span class="hljs-literal">False</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params"><span class="hljs-built_in">str</span>, key</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span> == <span class="hljs-string">&#x27;&#x27;</span>: <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span><br>    v = _str2long(<span class="hljs-built_in">str</span>, <span class="hljs-literal">False</span>)<br>    k = _str2long(key.ljust(<span class="hljs-number">16</span>, <span class="hljs-string">&quot;\0&quot;</span>), <span class="hljs-literal">False</span>)<br>    n = <span class="hljs-built_in">len</span>(v) - <span class="hljs-number">1</span><br>    z = v[n]<br>    y = v[<span class="hljs-number">0</span>]<br>    q = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> // (n + <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">sum</span> = (q * _DELTA) &amp; <span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">sum</span> != <span class="hljs-number">0</span>):<br>        e = <span class="hljs-built_in">sum</span> &gt;&gt; <span class="hljs-number">2</span> &amp; <span class="hljs-number">3</span><br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> xrange(n, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>            z = v[p - <span class="hljs-number">1</span>]<br>            v[p] = (v[p] - ((z &gt;&gt; <span class="hljs-number">5</span> ^ y &lt;&lt; <span class="hljs-number">2</span>) + (y &gt;&gt; <span class="hljs-number">3</span> ^ z &lt;&lt; <span class="hljs-number">4</span>) ^ (<span class="hljs-built_in">sum</span> ^ y) + (k[p &amp; <span class="hljs-number">3</span> ^ e] ^ z))) &amp; <span class="hljs-number">0xffffffff</span><br>            y = v[p]<br>        z = v[n]<br>        v[<span class="hljs-number">0</span>] = (v[<span class="hljs-number">0</span>] - ((z &gt;&gt; <span class="hljs-number">5</span> ^ y &lt;&lt; <span class="hljs-number">2</span>) + (y &gt;&gt; <span class="hljs-number">3</span> ^ z &lt;&lt; <span class="hljs-number">4</span>) ^ (<span class="hljs-built_in">sum</span> ^ y) + (k[<span class="hljs-number">0</span> &amp; <span class="hljs-number">3</span> ^ e] ^ z))) &amp; <span class="hljs-number">0xffffffff</span><br>        y = v[<span class="hljs-number">0</span>]<br>        <span class="hljs-built_in">sum</span> = (<span class="hljs-built_in">sum</span> - _DELTA) &amp; <span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">return</span> _long2str(v, <span class="hljs-literal">True</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    key = <span class="hljs-string">&quot;flag&quot;</span><br>    data1 = [<span class="hljs-number">0xbc</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xce</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xf4</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xc8</span>, <span class="hljs-number">0x5b</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0xd7</span>,<br>             <span class="hljs-number">0x6</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0xdc</span>]<br>    s = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">chr</span>, data1))<br>    s = decrypt(s, key)<br>    <span class="hljs-built_in">print</span> <span class="hljs-built_in">repr</span>(s)<br><span class="hljs-comment">#因为我太菜了，这里借鉴Moominn大师傅的脚本，这位师傅的WP质量很高，所以我就先拿来用了，慢慢消化学习大师傅的代码</span><br></code></pre></td></tr></table></figure><p><img src="//tva2.sinaimg.cn/large/0081aNtNly1h84zoxruuej309902lq2z.jpg" alt="flag"></p><p>结束！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/11/02/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84%5Djocker/"/>
    <url>/2022/11/02/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84%5Djocker/</url>
    
    <content type="html"><![CDATA[<h1 id="BUU之-网鼎杯-2020-青龙组-jocker"><a href="#BUU之-网鼎杯-2020-青龙组-jocker" class="headerlink" title="BUU之[网鼎杯 2020 青龙组]jocker"></a>BUU之[网鼎杯 2020 青龙组]jocker</h1><p>无壳32位程序，拖进IDA分析</p><p><img src="//tva2.sinaimg.cn/large/0081aNtNly1h7r4zz87krj30m10i0k02.jpg" alt="主函数"></p><p>当我看到这个VirtualProtect的时候，感觉应该是被做了手脚，先尝试着分析</p><p>操作部分在wrong和omg函数中，很容易实现逆运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> a1[] =<br>&#123;<br>  <span class="hljs-number">0x66</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x56</span>,<br>  <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x5A</span>,<br>  <span class="hljs-number">0x71</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x66</span><br>&#125;;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (; i &lt;= <span class="hljs-number">23</span>; ++i)<br>&#123;<br><span class="hljs-keyword">if</span> ((i &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>)<br>a1[i] += i;<br><span class="hljs-keyword">else</span><br>a1[i] ^= i;<br>&#125;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">23</span>; ++i)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, a1[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//flag&#123;fak3_alw35_sp_me!!&#125;看到这个fake就能猜到大概率白给了，果然提交了是不对的</span><br></code></pre></td></tr></table></figure><p>但是这样得出来的flag是不正确的，所以我们需要接着向下看，下面的encrypt才是真正的操作，但是我们想点进去的时候，会直接弹窗，我们点确认之后辉跳至一段看不懂的汇编代码，对于我这种菜鸟很是头疼</p><p>看了看别的师傅的WP，才知道上面提到的VirtualProtect相当于处理了部分代码，使得我们的逆向增加的难度</p><p>其实到这里我是想着去OD中动调看一下的，但是DUMP下来的程序可能跑不起来，这个想法就一闪而过了，没有去自己研究，还是得多磨一下时间才能自己琢磨出更多的东西</p><p>我们现在的目标就是需要知道这个encrypt函数里面的真正的代码</p><p>所以我们可以采用OD动调等真正的代码完全显现出来的时候，再将它dump下来，将它拖进IDA不就可以看到真正的程序了</p><p>在IDA中找到这块代码的地址，在OD中跳转到对应的地址然后下断点，等程序执行到此dump即可。</p><p><img src="//tvax1.sinaimg.cn/large/0081aNtNly1h7s840f6uqj30y80dsdol.jpg" alt="encrypt函数地址"></p><p>0x00401833这个地址就是进入真正代码的位置，接下来就是OD的工作了</p><p><img src="//tva1.sinaimg.cn/large/0081aNtNly1h7s7bn9q9kj30wa0eg7b6.jpg" alt="OD下断点"></p><p><img src="//tvax3.sinaimg.cn/large/0081aNtNly1h7s7ce7015j30qh0m411d.jpg" alt="dump process"></p><p>会得到一个新的可执行文件，我们从这个程序执行的过程得不到什么东西，我们就进IDA分析它</p><p><img src="//tva2.sinaimg.cn/large/0081aNtNly1h7s7fe57zzj30kr0i5guz.jpg" alt="新EXE的呈现形式"></p><p>我们对应找就是最下面的if里面的代码，点进去分析</p><p><img src="//tvax2.sinaimg.cn/large/0081aNtNly1h7s7gz9u0pj315r0cn465.jpg" alt="真正的代码"></p><p>这块东西细看还是能看得出一些东西的，关键的就是循环19次，其中将输入的字符和<code>hahahaha_do_you_find_me?</code>进行了异或，但只有19个</p><p>提取数据进行操作只得到一部分      flag{d07abccf8a410c</p><p>我们再仔细找找会发现if的下面还有一个函数是有用的</p><p><img src="//tva3.sinaimg.cn/large/0081aNtNly1h7s7lcc4ulj30rp0bqdlk.jpg" alt="漏掉的代码"></p><p>这玩意我没看明白他在干嘛，看了多位师傅的wp才知道是异或操作，因为最后一个字符肯定是  }   ，所以能推断出是和谁进行异或，然后前面的四个字符也和这个得到的数进行异或就能得到最后的flag    flag{d07abccf8a410cb37a}</p><p>由于这里的操作我并不知道是由哪个地方可靠的提示得到异或操作的，所以我暂时当他是猜谜吧（如果有大佬解惑感激不尽）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/11/01/%5BGUET-CTF2019%5Dnumber_game/"/>
    <url>/2022/11/01/%5BGUET-CTF2019%5Dnumber_game/</url>
    
    <content type="html"><![CDATA[<h1 id="BUU之-GUET-CTF2019-number-game"><a href="#BUU之-GUET-CTF2019-number-game" class="headerlink" title="BUU之[GUET-CTF2019]number_game"></a>BUU之[GUET-CTF2019]number_game</h1><p>这道题目的关键代码很容易定位到，所以略过这一部分</p><p><img src="//tva3.sinaimg.cn/large/0081aNtNly1h7py4pcq62j30sd0hzaht.jpg" alt="关键代码"></p><p>我们需要分析的也就是两个if块的代码对我们的输入进行了什么操作</p><p>sub_4006D6是将我们的输出限定在47到52之间</p><p>sub_400758是将我们的输入一个一个放在一颗先序的二叉树中</p><p>sub_400807是中序遍历二叉树</p><p>sub_400881是将中序遍历得到的结果赋值到固定的位置（看到后面会明白是填充了#(0x23)）</p><p>sub_400917是check经过操作的数据（是一个简化的数独），如果符合条件的话就正确，得到flag</p><p><img src="//tvax2.sinaimg.cn/large/0081aNtNly1h7pydj3lv5j306e05ndgh.jpg" alt="简化数独呈现"></p><p>做数独得到最下面的数字，也就是中序遍历的结果，但是我们没有二叉树的结构图</p><p>我们可以先序的方式创建一棵二叉树，就用0~9当作数据（也可以是下标当成数据来用，我们去得到二叉树的图）</p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Creat</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">if</span> (x &gt;= y)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;太大了！\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>Creat(<span class="hljs-number">2</span> * x + <span class="hljs-number">1</span>, y);<br>Creat(<span class="hljs-number">2</span> * (x + <span class="hljs-number">1</span>), y);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>Creat(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过这个我们可以得到二叉树的结构图，然后我们将它进行中序遍历得到一串数字，和我们上面得到的数据来进行对比放入同样的位置，得到程序中的真正的二叉树，这时候我们直接将数组还原就可以了，它就是flag。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/18/%E8%B0%83%E8%AF%95%E6%96%AD%E7%82%B9%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/"/>
    <url>/2022/10/18/%E8%B0%83%E8%AF%95%E6%96%AD%E7%82%B9%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="断点类型总结"><a href="#断点类型总结" class="headerlink" title="断点类型总结"></a>断点类型总结</h1><h3 id="（1）INT3断点-x2F-CC断点-x2F-F2断点-x2F-软件断点"><a href="#（1）INT3断点-x2F-CC断点-x2F-F2断点-x2F-软件断点" class="headerlink" title="（1）INT3断点&#x2F;CC断点&#x2F;F2断点&#x2F;软件断点"></a>（1）INT3断点&#x2F;CC断点&#x2F;F2断点&#x2F;软件断点</h3><p>它是我们<strong>常用</strong>的断点</p><p>实现原理：1、替换指令，在下断点的位置处第一个操作码变成cc</p><p>​                   2、调试器执行到int3时会引发一个异常并捕获，使得程序中断</p><p>​                   3、断下之后在恢复原来的操作码</p><p>优点：数量没有限制</p><p>缺点：很容易被检测到（校验程序过不了）</p><h3 id="（2）内存断点"><a href="#（2）内存断点" class="headerlink" title="（2）内存断点"></a>（2）内存断点</h3><p>页属性如下：#define PAGE_NOACCESS      0x01<br>　　　　        #define PAGE_READONLY      0x02<br>　　　　        #define PAGE_READWRITE     0x04<br>　　　　        #define PAGE_WRITECOPY     0x08<br>　　　　        #define PAGE_EXECUTE      0x10<br>　　　　        #define PAGE_EXECUTE_READ    0x20<br>　　　　        #define PAGE_EXECUTE_READWRITE 0x40<br>　　　　        #define PAGE_EXECUTE_WRITECOPY 0x80</p><p>我们调用 <strong>VirutalProtectEx</strong> 函数来修改页属性</p><h4 id="内存访问断点："><a href="#内存访问断点：" class="headerlink" title="内存访问断点："></a>内存访问断点：</h4><p>原理：</p><p>当我们设置内存访问断点时，将对应地址所在的页设置为PAGE_NOACCESS</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">VirtualProtectEx</span><span class="hljs-params">(handle, (PVOID)</span><span class="hljs-title">debugAddress</span></span>, <span class="hljs-number">1</span>, PAGE_NOACCESS, &amp;oldProtote) <br></code></pre></td></tr></table></figure><p>程序执行在访问该地址时会触发ACCESS_VIOLATION(c0000005)错误，，会走0E号中断，然后包装加入到 DEBUG_OBJECT.EventLink，通知调试器有事件需要处理。</p><p>注：我们是对一个地址（字节、字或双字）下断点，但我们操作的是一个页，我们需要看一下是不是我们想要断的地方，如果是其他地方就“放行”</p><h4 id="内存写入："><a href="#内存写入：" class="headerlink" title="内存写入："></a>内存写入：</h4><p>顾名思义，如果程序只是单纯访问这个地址，不会中断，需要修改内存才会断下</p><p><strong>优点</strong>：可以很清楚的知道程序什么时候用到的跟踪的数据</p><p>​            未修改代码，不会被校验程序检测到</p><p><strong>缺点</strong>：调试器截获异常会比较地址是否是设置的断点地址，它会对程序的运行速度有较大的影响，所以一般只设置一个内存断点</p><p>​            重载程序时内存断点会失效</p><h3 id="（3）条件断点"><a href="#（3）条件断点" class="headerlink" title="（3）条件断点"></a>（3）条件断点</h3><p>和INT3断点相像，只是程序只有在满足我们设置的条件时才会中断，否则不会</p><p>常见设置条件断点的对象：寄存器、存储器、消息等。</p><p>适用场景：1、循环调用时</p><p>​                    2、不能控制外部的多次调用时</p><p>​                    3、可以用来对付时钟，来使得程序停止</p><h3 id="（4）硬件断点"><a href="#（4）硬件断点" class="headerlink" title="（4）硬件断点"></a>（4）硬件断点</h3><p>硬件断点与<strong>DRx调试寄存器</strong>有关</p><p> 1）DR0~DR3：调试地址寄存器，保存需要监视的地址，如设置硬件断点；</p><p> 2）DR4~DR5：保留，未公开具体作用；</p><p> 3）DR6：调试寄存器组状态寄存器；</p><p> 4）DR7：调试寄存器组控制寄存器。</p><p>断点原理：使用4个调试寄存器(DR0~DR3)来设定地址，DR7来设定状态。最多只能设置4个断点。</p><p>硬件断点比软件断点的功能更强，除了函数断点外，还可以数据断点，可以指定当数据被读或写时中断。</p><p>硬件断点的本质就是在指定内存下断点，内存可以位于代码段（函数断点）也可以是数据段（数据断点）。可以设置事件有执行、写入、读写时中断。</p><p>Dr7寄存器：可以按位设置硬件断点的属性，包括：开关位、条件位、长度位。</p><p>​                      dr7的开关位控制dr0~dr3号硬件断点是否启用。</p><p>​                      dr7的条件位控制dr0~dr3如何被触发。00 执行时触发。01写入时触发，11读写时触发。</p><p>​                      dr0~dr3指定的内存地址，dr7的长度位控制内存长度。</p><p><strong>优点</strong>：速度快，在INT 3容易被发现的地方，使用硬件断点来代替会有很好的效果；</p><p><strong>缺点</strong>：最多只能使用<strong>4</strong>个断点。</p><h3 id="（5）消息断点"><a href="#（5）消息断点" class="headerlink" title="（5）消息断点"></a>（5）消息断点</h3><p>消息断点使得当某个特定窗口函数接收到某个特定消息时程序中断。（会有窗口，例如输入序列号）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/18/%E8%AE%A4%E8%AF%86rsa%E7%AE%97%E6%B3%95/"/>
    <url>/2022/10/18/%E8%AE%A4%E8%AF%86rsa%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="认识RSA算法"><a href="#认识RSA算法" class="headerlink" title="认识RSA算法"></a>认识RSA算法</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>RSA算法也就是我们在网络通信中常用的公私钥密码算法，其原理和安全性依赖于大数分解。</p><h3 id="加解密过程"><a href="#加解密过程" class="headerlink" title="加解密过程"></a>加解密过程</h3><p><img src="//tva4.sinaimg.cn/large/0081aNtNly1h65yab6kqjj31880ks12s.jpg" alt="RSA加密解密过程"></p><p>这是在b站的技术蛋老师的视频中截得的</p><p>公钥是公开的私钥的其中一个也已知，现在假如我们得到一段密文，剩下要做的事就是推出私钥的另一个，也就是D，这样我们就可以解密这段密文。</p><h3 id="分析方法"><a href="#分析方法" class="headerlink" title="分析方法"></a>分析方法</h3><p><img src="//tvax4.sinaimg.cn/large/0081aNtNly1h65yqq3ifxj319m0j8n6y.jpg" alt="RSA算法"></p><p>上面也有提到RSA算法的安全性来源于大数分解，也就是N的大小</p><p><strong>1、</strong>一般是给出我们N，我们可以在<a href="http://factordb.com/index.php?query=103461035900816914121390101299049044413950405173712170434161686539878160984549">因子数据库.com</a> 进行大数分解，做题的话一般都能得到p和q，如果这个N极大，那就没什么好办法了</p><p><strong>2、</strong>得到p和q之后，我们就可以用欧拉函数算出t</p><p><strong>3、</strong>公钥一般都是公开的，所以e也已知</p><p><strong>4、</strong>现在我们就可以算私钥了，可以在python中用gmpy2.invert(e,t)能算出私钥，其实根据上面的这个5也可以推出私钥，看个人</p><p><strong>5、</strong>剩下的事当然就是写脚本进行解密了</p><h3 id="题目案例（-SUCTF2019-SignIn）"><a href="#题目案例（-SUCTF2019-SignIn）" class="headerlink" title="题目案例（[SUCTF2019]SignIn）"></a>题目案例（[SUCTF2019]SignIn）</h3><p>我们只分析这道题的rsa解密部分</p><p><img src="//tvax4.sinaimg.cn/large/0081aNtNly1h65z4m6u29j30wn0fudql.jpg" alt="主函数"></p><h5 id="判断RSA算法"><a href="#判断RSA算法" class="headerlink" title="判断RSA算法"></a>判断RSA算法</h5><p>判断RSA算法大概可以从以下几个方面入手。首先题目使用gmpz开头的函数库，这些本身都是大数运算库，RSA会用到；然后是题目中会出现很长的大数；最后就是65537这个数，常用作公钥e。</p><p>程序本身逻辑很简答，简单分析下</p><p>现在我们又e&#x3D;65537，密文v7，n&#x3D;v4，那么t也就可以算出来了，所以我们就剩下写脚本解密了</p><p>源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-comment">#通过在我上面提到的网站可以得到这两个数</span><br>p = <span class="hljs-number">282164587459512124844245113950593348271</span><br>q = <span class="hljs-number">366669102002966856876605669837014229419</span><br>e = <span class="hljs-number">65537</span><span class="hljs-comment">#公钥</span><br>c = <span class="hljs-number">0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span><span class="hljs-comment">#密文</span><br>n = p*q<br>d = gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<span class="hljs-comment">#这里直接将用(p-1)*(q-1)来代表t</span><br>m = gmpy2.powmod(c,d,n)<span class="hljs-comment">#求得明文</span><br><span class="hljs-built_in">print</span>(m)<br></code></pre></td></tr></table></figure><p>这样我们就得到了明文的内容</p><p>在看一下sub_96A的逻辑，就可以得到flag，这里不做分析</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/18/%E7%AC%AC%E4%B8%80%E6%AC%A1AWD/"/>
    <url>/2022/10/18/%E7%AC%AC%E4%B8%80%E6%AC%A1AWD/</url>
    
    <content type="html"><![CDATA[<h1 id="第一次AWD"><a href="#第一次AWD" class="headerlink" title="第一次AWD"></a>第一次AWD</h1><h3 id="AWD："><a href="#AWD：" class="headerlink" title="AWD："></a>AWD：</h3><p>比赛中每个队伍维护多台服务器，服务器中存在多个漏洞，利用漏洞攻击其他队伍可以进行得分，修复漏洞可以避免被其他队伍攻击失分。</p><p>头一次接触这种形式的比赛，如果对pwn和web一点都不知道，会显得很呆，至少我的感觉是这样的，</p><p>虽然这次可能不是那么完美，但是还是收获了一些东西。</p><h4 id="经验："><a href="#经验：" class="headerlink" title="经验："></a>经验：</h4><p>1、在这种比赛中，一个队伍中有一个沉稳的web手或者一个强大的pwn手极其重要，相当于稳了一半</p><p>2、上来一定要优先备份，如果自己的站被别的队删了，可以快速恢复，check不过会掉大分，我自己感觉，即使不去抢夺先手攻击的机会，也一定要先使得自己的站是正常的</p><p>3、若目前阶段自己的站没有大问题，我们就要尽可能的拿到别人的flag，每轮都会刷新，记得关注时间，如果好多轮都没注意到这个问题，而你此时的审计代码没有什么重大突破，这场就很难反追了。</p><p>4、什么都不懂的话，像我这样，就要去询问web手目前你可以干什么，例如盯时间，flag刷新了提醒队友，或者看到别的队攻击自己的日志，也要跟队友交流，自己有什么想法要先跟队友交流再实施，尽可能的稳一点，稳中求胜</p><p>5、不要走神，时刻关注自己的站的状态和有没有新的流量，有什么发现自己不明白的话优先跟web手交流，寻求最佳策略，团队合作很重要</p><h4 id="教训"><a href="#教训" class="headerlink" title="教训;"></a>教训;</h4><p>1、如果自己被打了而你又腾不出时间来应付，这个时候就要用最少的时间权衡利弊，也要关注一下比赛时间，时间还长的话就要抽时间抓紧修复漏洞，越快越好</p><p>2、要有快速写脚本的能力，不能只是能看得懂脚本，但是自己写不出来或者说不会改，例如自动化提交flag脚本，这个如果不实现的话，会浪费大量的时间，可能一轮中感受不明显，但是每轮都多出一点时间，这个时间可能就是决胜的关键，如果在这个时间审出了一个大洞，别人都不知道，你能修好，就是上大分的时刻</p><p>3、手速也要快，有可能上来你上东西上的慢了，别的队的大佬直接狂删你的站，check不过等于G</p><p>4、要有一些应付紧急情况的方案，不然操作出问题可能直接给自己整蒙了，大脑宕机&#x3D;靶机宕机，同时也要有一些取舍，像这次我们在进行正常操作时发现站点突然就会崩掉，这个时候就是危险的时候，因为有可能马上会check，所以要尽快找出问题，这种情况有相应的plan B，可能会让局面稳定下来，然后进行后续操作</p><h4 id="最重要的是check！check！check！！！"><a href="#最重要的是check！check！check！！！" class="headerlink" title="最重要的是check！check！check！！！"></a>最重要的是check！check！check！！！</h4><p>最好的就是稳步前进</p><p>如果局面把控不住就同归于尽！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/18/%E6%97%B6%E9%92%9F%E5%B9%B2%E6%89%B0%E6%8C%89%E9%92%AE%E4%BA%8B%E4%BB%B6%E6%96%AD%E7%82%B9/"/>
    <url>/2022/10/18/%E6%97%B6%E9%92%9F%E5%B9%B2%E6%89%B0%E6%8C%89%E9%92%AE%E4%BA%8B%E4%BB%B6%E6%96%AD%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="时钟干扰按钮事件断点"><a href="#时钟干扰按钮事件断点" class="headerlink" title="时钟干扰按钮事件断点"></a>时钟干扰按钮事件断点</h1><p>一般分析程序的时候下断点是不可或缺的手段，相对应的就会有人编写程序让你无法正常使用断点，我刚接触到的时钟就会造成断点异常</p><p>先用易语言编写一个带时钟的简单程序</p><p><img src="//tva3.sinaimg.cn/large/0081aNtNly1h5fe69t5pmj30el07ewfz.jpg" alt="编程界面"></p><p>拖到OD加载一下，进去看一下是什么情况</p><p>因为程序简单，我们进去直接ctrl+B搜索16进制易语言控件消息派发函数特征码FF55FC5F5E,跳转至下面的位置</p><p><img src="//tvax2.sinaimg.cn/large/0081aNtNly1h5fe9auhonj30s002qwg3.jpg" alt="按钮事件特征码位置"></p><p>可以看到，我们已经在00454D0D下断点，接着我们点运行，会发现程序老是在这个地方断下来，断点异常</p><p><img src="//tvax4.sinaimg.cn/large/0081aNtNly1h5febnorj0j31010l9tka.jpg" alt="不断断在按钮特征码的位置"></p><p>这个call跟进去就是上面编程界面的时钟子程序</p><p><img src="//tva4.sinaimg.cn/large/0081aNtNly1h5fepjivx7j30x30ac0ww.jpg" alt="call的时钟函数"></p><p>实际上点击按钮和时钟都会停在这个call</p><p>对付这种情况，可以使用条件断点</p><p>下条件断点</p><p><img src="//tvax2.sinaimg.cn/large/0081aNtNly1h5ferts1p0j30sr05mgp1.jpg" alt="下条件断点"></p><p>之后点击运行发现是我们想要的效果，证明成功了</p><p><img src="//tva3.sinaimg.cn/large/0081aNtNly1h5fesjs5f7j30v00bcahh.jpg" alt="正常显示"></p><p>这样就可以解决时钟干扰按钮事件断点的问题</p><p>也可以干掉时钟（不可取），PCHunter在32位下是正常的，在64位下有蓝屏BUG</p><p>注：时钟是在主线程执行的</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/18/%E5%85%B3%E4%BA%8E%E8%8A%B1%E6%8C%87%E4%BB%A4/"/>
    <url>/2022/10/18/%E5%85%B3%E4%BA%8E%E8%8A%B1%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="关于花指令"><a href="#关于花指令" class="headerlink" title="关于花指令"></a>关于花指令</h1><p>花指令：是作者希望使破解者反汇编的时候出错，让他们无法清楚正确地反汇编程序的内容，迷失方向。</p><p> 花指令构造思路：构造恒成立跳转，中间插入无效数据。</p><p>注：花指令不会干扰程序正常运行，也不会影响结果，花指令防静态分析和字符串搜索，防不住动态调试。</p><p><img src="//tva3.sinaimg.cn/large/0081aNtNly1h5eitwyfb8j30m9076znk.jpg" alt="花指令例子"></p><p>像这样，没有明确指到跳转的地方，就可能是花指令了</p><p>下面以这个为例子来进行分析，要手动去花指令，我们需要先将75 00 E8这三个字节改为90（NOP），效果如下</p><p><img src="//tvax1.sinaimg.cn/large/0081aNtNly1h5eixth9msj30q703jq4a.jpg" alt="例子--去花"></p><p>下面再看另一种模板</p><p><img src="//tvax1.sinaimg.cn/large/0081aNtNly1h5ej213ibvj31bp075af7.jpg" alt="call指令--花指令"></p><p>这个就比较有意思，直接call自己的下一行地址，看起来有点奇怪，我们接着往下看，call之后会把下一行地址压入栈顶，然后add之后是将0x0040200B加上了0x17，得到的地址是0x402022,也就是说EIP存放的下次执行的指令是在0x202022，那这中间的数据就都是干扰破解者的，这个例子也说明，不是只有跳转才能实现花指令，能改变EIP的指令都可以巧妙的实现花指令。</p><p>去花效果：</p><p><img src="//tvax4.sinaimg.cn/large/0081aNtNly1h5ejafyeqhj30no0k2dks.jpg" alt="call去花"></p><p>我们在看一下有花指令和去花指令的程序在IDA中的区别</p><p>有花指令的：</p><p><img src="//tvax2.sinaimg.cn/large/0081aNtNly1h5ejfvplxmj30qg07z48l.jpg" alt="IDA花"></p><p>去花指令的：</p><p><img src="//tva3.sinaimg.cn/large/0081aNtNly1h5mkd333ghj30pk0i4ajf.jpg" alt="IDA去花"></p><p>IDA手动去除花指令比较麻烦，OD比较方便</p><p>看到奇怪的指令，像jmp和call可以修改EIP，分析一下，很可能就有花指令的存在，</p><p>手动去除花指令：将其中插入的无用数据改为nop即可。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/18/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DeasyRE/"/>
    <url>/2022/10/18/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DeasyRE/</url>
    
    <content type="html"><![CDATA[<h1 id="2019红帽杯-easyRE"><a href="#2019红帽杯-easyRE" class="headerlink" title="[2019红帽杯]easyRE"></a>[2019红帽杯]easyRE</h1><p>惯例先放进die看一眼</p><p><img src="//tvax3.sinaimg.cn/large/0081aNtNly1h63vbn1i2hj30mg0d9adf.jpg" alt="die"></p><p>接着放进ida64位查看程序的运行逻辑</p><p>一般我们的操作是先看看main函数，我们到函数窗口搜索main函数</p><p><img src="//tvax2.sinaimg.cn/large/0081aNtNly1h63vf0nmgxj308t0cjt8z.jpg" alt="搜索main函数"></p><p>没有看到，那现在只是试试搜索字符串了，当然也可以进来直接搜索字符串，定位关键位置、</p><h3 id="搜索字符串"><a href="#搜索字符串" class="headerlink" title="搜索字符串"></a>搜索字符串</h3><p><img src="//tvax1.sinaimg.cn/large/0081aNtNly1h63vgnhwbxj30os0fqqfj.jpg" alt="搜索字符串"></p><p>这里的提示很明显，You  found me!!!，点进去看一下交叉引用，找到关键函数，分析他的伪代码</p><p><img src="//tva2.sinaimg.cn/large/0081aNtNly1h63vkifc35j30ik0esjxq.jpg" alt="关键函数上半段"></p><p><img src="//tva2.sinaimg.cn/large/0081aNtNly1h63vkuxdzbj30h10dz79x.jpg" alt="关键函数下半段"></p><p>我一般是先看看关键字符提示的位置，然后往上翻，从上往下分析当然也是很好的做法，可以更好的理解整个程序的流程</p><h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><p>从这You  found me!!!这里看上面的进入条件，sub_400360这个函数没有识别出来，但这个函数我猜的是strcmp函数，看别的师傅的wp知道我猜对了，上面这么一堆，就是一个函数来回用，点进去能清晰的看到他是一个base64解密，刚才我们搜索字符串的时候也看到了他的特征字串，我们提取off_6CC090的数据进行base64解码，注意看好，这里要解码10次</p><p><img src="//tva3.sinaimg.cn/large/0081aNtNly1h63vs1u9f3j30gt0f5acs.jpg" alt="提取字符串"></p><p><img src="//tva4.sinaimg.cn/large/0081aNtNly1h63vtz1cibj30pq0ec77u.jpg" alt="10次解码的结果"></p><p>然后我们用这个结果看看，本来以为是wp的，结果</p><p><img src="//tva3.sinaimg.cn/large/0081aNtNly1h63vv52mryj30p20oxqhq.jpg" alt="链接显示的页面"></p><p>我还以为藏在文章中，看了一下，好像不太对劲啊，这根本就是个坑，那flag藏在哪</p><h3 id="真正的关键位置"><a href="#真正的关键位置" class="headerlink" title="真正的关键位置"></a>真正的关键位置</h3><p>然后就没头绪了，看了看别的师傅的wp，才知道通过数据定位到关键位置，然后能看到具体进行了什么操作</p><p><img src="//tva2.sinaimg.cn/large/0081aNtNly1h63wfcttouj30ra0ex49j.jpg" alt="关键数据"></p><p>你看下面的数据是不是有点奇怪，应该是会被操作，但是我们并没有看见对它的操作，所以找一下吧</p><p><img src="//tva2.sinaimg.cn/large/0081aNtNly1h63whloa3dj30wa0ewtgc.jpg" alt="对数据的操作"></p><p>利用交叉引用可以到达这里，其实这里才是真正要操作的地方，两个异或等于的分别是’f’ 和 ‘g’,这不就是flag的开头和结尾，而且6CC0A0和后面的6CC0A3是连在一起的，也是四个连续的，猜测关键操作就在这里，下面的循环就是最后一步了，这个以6CC0A0开头的有很多字符串，既然是以flag开头的，那我们不妨让他运行完循环输出看看能不能得到flag，我们已知byte_6CC0A0前四个字符，可以倒退出v1的值(v1&#x3D;v4)</p><p>注：这里我是猜的前四个字符和v1异或的结果是flag</p><p>得到v1为{‘&amp;’,’Y’,’A’,’1’}</p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">/*if((v4[1]^byte_6CC0A0[0])==&#x27;f&#x27;&amp;&amp;^(unsigned __int8)byte_6CC0A3)==103)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">for(j=0; j&lt;=24; ++j)</span><br><span class="hljs-comment">sub_410E90(byte_6CC0A0[j]^*((_BYTE *)&amp;v4+j%4));</span><br><span class="hljs-comment">&#125;*/</span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> ida_chars[]=<br>&#123;<br>  <span class="hljs-number">0x40</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x2F</span>,<br>  <span class="hljs-number">0x24</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x6E</span>,<br>  <span class="hljs-number">0x72</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x5B</span><br>&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> v1[<span class="hljs-number">4</span>]=&#123;<span class="hljs-string">&#x27;&amp;&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> flag[<span class="hljs-number">25</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(;i&lt;<span class="hljs-number">25</span>;++i)<br>&#123;<br>flag[i]=ida_chars[i]^v1[i%<span class="hljs-number">4</span>];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,flag[i]);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到的结果：flag{Act1ve_Defen5e_Test}是正确的</p><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><p>这里我是无意中跳过一个坑，这个虽然为后面的操作提供了一些信息，但是我直接猜想的和答案是一样的，所以可以拿到flag</p><p><img src="//tva4.sinaimg.cn/large/0081aNtNly1h6464swjfsj30ix0doaft.jpg" alt="忽略的字串"></p><p>我们将这段进行逆向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">73</span>,<span class="hljs-number">111</span>,<span class="hljs-number">100</span>,<span class="hljs-number">108</span>,<span class="hljs-number">62</span>,<span class="hljs-number">81</span>,<span class="hljs-number">110</span>,<span class="hljs-number">98</span>,<span class="hljs-number">40</span>,<span class="hljs-number">111</span>,<span class="hljs-number">99</span>,<span class="hljs-number">121</span>,<span class="hljs-number">127</span>,<span class="hljs-number">121</span>,<span class="hljs-number">46</span>,<span class="hljs-number">105</span>,<span class="hljs-number">127</span>,<span class="hljs-number">100</span>,<span class="hljs-number">96</span>,<span class="hljs-number">51</span>,<span class="hljs-number">119</span>,<span class="hljs-number">125</span>,<span class="hljs-number">119</span>,<span class="hljs-number">101</span>,<span class="hljs-number">107</span>,<span class="hljs-number">57</span>,<span class="hljs-number">123</span>,<span class="hljs-number">105</span>,<span class="hljs-number">121</span>,<span class="hljs-number">61</span>,<span class="hljs-number">126</span>,<span class="hljs-number">121</span>,<span class="hljs-number">76</span>,<span class="hljs-number">64</span>,<span class="hljs-number">69</span>,<span class="hljs-number">67</span>,<span class="hljs-number">255</span>]<br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">0</span>,<span class="hljs-number">36</span>):<br>    flag+=<span class="hljs-built_in">chr</span>(a[i]^i)<br><span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure><p>得到：Info:The first four chars are <code>flag</code></p><p>这个也算是提示了我们后面对v1的判断吧</p><p>这一步我确实是漏掉了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/18/RE%E7%AE%80%E5%8D%95%E9%A2%98%E8%A7%A3%E7%AD%94/"/>
    <url>/2022/10/18/RE%E7%AE%80%E5%8D%95%E9%A2%98%E8%A7%A3%E7%AD%94/</url>
    
    <content type="html"><![CDATA[<h1 id="buuRE简单题解答"><a href="#buuRE简单题解答" class="headerlink" title="buuRE简单题解答"></a>buuRE简单题解答</h1><h2 id="reverse-3"><a href="#reverse-3" class="headerlink" title="reverse_3"></a>reverse_3</h2><p>die看一下</p><p><img src="//tva1.sinaimg.cn/large/0081aNtNly1h5w0ukjg5yj30mf0d278e.jpg" alt="die"></p><p>用32位IDA看一下main函数</p><p><img src="//tva2.sinaimg.cn/large/0081aNtNly1h5w0wwg66yj30cq06ugp2.jpg" alt="main函数"></p><p>Str2点进去有一段字符串：e3nifIH9b_C@n@dH，这个就是处理之后的flag</p><p>if上面的for循环是一个处理，写一个简单脚本将原来的字符串搞出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> Str2[]=<br>&#123;<br>  <span class="hljs-number">0x65</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x5F</span>,<br>  <span class="hljs-number">0x43</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x00</span><br>&#125;;<br><span class="hljs-keyword">for</span>(; j&lt;<span class="hljs-number">17</span>; ++j)<br>&#123;<br>Str2[j]-=j;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,Str2[j]);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到：e2lfbDB2ZV95b3V9?       看这个也不是flag，所以继续往上跟，v4后面的函数点进去</p><p><img src="//tva4.sinaimg.cn/large/0081aNtNly1h5w130d6p7j30v90es15a.jpg" alt="base64特征"></p><p>这个很有特征，随便搜一下就能找到好像是base64，点那一串东西进去也能看到特征</p><p>是ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&#x3D;</p><p>这个看见的话应该是没问题的吧</p><p>所以将上面的字符串base64解码一下就可以得到</p><p><img src="//tva1.sinaimg.cn/large/0081aNtNly1h5w164stavj30nt0e1dim.jpg" alt="flag"></p><h2 id="SimpleRev"><a href="#SimpleRev" class="headerlink" title="SimpleRev"></a>SimpleRev</h2><p>die看一下</p><p><img src="//tva2.sinaimg.cn/large/0081aNtNly1h5w19q9zrmj30mp0d2gp7.jpg" alt="die"></p><p>是linux下的文件，用IDA64位进去看一下，找到main函数进去</p><p><img src="//tvax4.sinaimg.cn/large/0081aNtNly1h5w1idl81ij30tm0dtteu.jpg" alt="main函数"></p><p>Decry函数就是藏flag的函数</p><p><img src="C:\Users\亦安\AppData\Roaming\Typora\typora-user-images\image-20220905211837353.png" alt="image-20220905211837353"></p><p><img src="//tva1.sinaimg.cn/large/0081aNtNly1h5w1j1nswuj30k00fh0xl.jpg" alt="关键位置"></p><p>分析程序，提示Congratulation的条件就是我们首先要找的地方，找找text到底在哪，可以看到是在上面的join函数的返回值</p><p>join函数</p><p><img src="//tvax2.sinaimg.cn/large/0081aNtNly1h5w1nft1pwj30gk0a777f.jpg" alt="join函数"></p><p>一个字符串复制，一个拼接</p><p>上一层函数的key3，也就是a1，是“kills”，a2是一个十六进制的数，将它一个字节一个字节拆开，转成字符串，注意小端问题</p><p>这样就可以得到text字符串，也就是处理之后的字符串</p><p>看到上面字符串处理的地方，发现我们还不知道key是什么，所以接着找</p><p>key也是一个复制，一个拼接，key1是”ADSFK”，src也是一个十六进制数，跟上面一样的操作、</p><p>紧接着对key字符串进行了处理，这个我们也要还原</p><p>到这分析工作就到位了，接着就剩下写脚本，这个地方我卡住了，上网搜了一下才搞出来</p><p>str2[v2] &#x3D; (v1 - 39 - key[v3 % v5] + 97) % 26 + 97;</p><p>这个玩意看着很好搞，但是上手的话发现取余不知道怎么处理，我也蒙了，（因为我是菜鸡）上网搜了一下，进行遍历，然后将符合条件的字符取出来，就是我们的flag</p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,v3=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> flag[<span class="hljs-number">11</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> key[]=&#123;<br><span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;S&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;K&#x27;</span>,<span class="hljs-number">0x4E</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x4C</span>,<span class="hljs-number">0x53</span>,<span class="hljs-string">&#x27;\0&#x27;</span><br>&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> str[]=&#123;<br><span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x6F</span>,<span class="hljs-number">0x77</span>,<span class="hljs-string">&#x27;\0&#x27;</span><br>&#125;;<br><br><span class="hljs-keyword">for</span>(; i&lt;<span class="hljs-built_in">strlen</span>(key); ++i)<br>&#123;<br><span class="hljs-keyword">if</span>(key[v3%<span class="hljs-built_in">strlen</span>(key)]&gt;<span class="hljs-number">64</span>&amp;&amp;key[v3%<span class="hljs-built_in">strlen</span>(key)]&lt;=<span class="hljs-number">90</span>)<br>key[i]=key[v3%<span class="hljs-built_in">strlen</span>(key)]+<span class="hljs-number">32</span>;<br>++v3;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,key);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,v3);     <span class="hljs-comment">//此时v3为10</span><br><br><span class="hljs-comment">//str2[v2]=(v1-39-key[v3%v5]+97)%26+97;</span><br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;++i)<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">5</span>;++j)<br>&#123;<br>flag[i]=(str[i]<span class="hljs-number">-97</span>)+j*<span class="hljs-number">26</span><span class="hljs-number">-97</span>+<span class="hljs-number">39</span>+key[i];<br><span class="hljs-keyword">if</span>(flag[i]&gt;<span class="hljs-number">64</span>&amp;&amp;flag[i]&lt;<span class="hljs-number">91</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,flag[i]);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="//tvax4.sinaimg.cn/large/0081aNtNly1h5w1y4vrvwj304y0283yo.jpg" alt="flag"></p><p>最后的这个字串加上flag{}就可以了</p><h2 id="luck-guy"><a href="#luck-guy" class="headerlink" title="luck_guy"></a>luck_guy</h2><p>die看一下</p><p><img src="//tvax2.sinaimg.cn/large/0081aNtNly1h5w20z9kqrj30mo0d30wp.jpg" alt="die"></p><p>用IDA打开分析程序，找到main 函数点开</p><p><img src="//tvax1.sinaimg.cn/large/0081aNtNly1h5w22a3q6uj30jt09saeo.jpg" alt="main"></p><p>这个patch_me函数就是关键函数，点进去看到get_flag，肯定就到达关键位置了</p><p><img src="//tvax1.sinaimg.cn/large/0081aNtNly1h5w2428oosj30fn0hi0zu.jpg" alt="上半段"></p><p><img src="//tvax3.sinaimg.cn/large/0081aNtNly1h5w24mgumaj30i40dedjp.jpg" alt="下半段"></p><p>一眼看到了flag，分析之后只得到了一半，      GXY{do_not_     </p><p>f2点进去没看到，下面有关于f2的操作才是我们真正要看的地方</p><p>这个循环有五次，switch语句中2和3都是输出一句闲话，剩下1、4、5，这个简单看一下就能猜到是按</p><p>4–&gt;5–&gt;1的顺序来执行的，先给他一个值，然后处理，最后得到flag 的另一半，写个简单C就能得到</p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-type">char</span> f2[]=&#123;<br><span class="hljs-number">0x69</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x60</span>,<span class="hljs-number">0x6F</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-string">&#x27;\0&#x27;</span><br>&#125;;<br><br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">8</span>; ++j)<br>&#123;<br><span class="hljs-keyword">if</span>(j%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)<br>f2[j]-=<span class="hljs-number">2</span>;<br><span class="hljs-keyword">else</span><br>--f2[j];<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,f2);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果<img src="//tva2.sinaimg.cn/large/0081aNtNly1h5w2d45rlzj302z00wa9x.jpg" alt="后半段flag"></p><p>拼接起来就是flag</p><p>注：看好格式再进行提交。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/18/NewStarCTF%E8%89%BE%E5%85%8B%E4%BD%93%E6%82%9F%E9%A2%98%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89/"/>
    <url>/2022/10/18/NewStarCTF%E8%89%BE%E5%85%8B%E4%BD%93%E6%82%9F%E9%A2%98%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="NewStarCTF艾克体悟题（复现）"><a href="#NewStarCTF艾克体悟题（复现）" class="headerlink" title="NewStarCTF艾克体悟题（复现）"></a>NewStarCTF艾克体悟题（复现）</h3><p>apk可以先拖在jadx-gui-1.4.0-no-jre-win.exe看一下啊，里面涉及到的就不再提了，先了解一些会看得更快</p><p>hint:<a href="https://note.youdao.com/ynoteshare/index.html?id=a006b246edc7fc65ed20abbc2d9c5351&amp;type=note&amp;%5C_time=1663716620460(%E5%8F%AF%E8%83%BD%E6%98%AF%E5%88%AB%E4%BA%BA%E7%BD%91%E4%B8%8A%E6%89%BE%E7%9A%84%E8%B5%84%E6%96%99%E5%90%A7%EF%BC%8C%E5%BA%94%E8%AF%A5%E6%98%AF%E6%B2%A1%E6%9C%89%E7%9B%B4%E6%8E%A5%E7%BB%99%E5%87%BA)">https://note.youdao.com/ynoteshare/index.html?id=a006b246edc7fc65ed20abbc2d9c5351&amp;type=note&amp;\_time=1663716620460(可能是别人网上找的资料吧，应该是没有直接给出)</a></p><p>因为是一个apk文件，那我们就去下一个模拟器，我是跟着上面的链接里做的，用的夜神模拟器</p><h5 id="尽可能获取信息"><a href="#尽可能获取信息" class="headerlink" title="尽可能获取信息"></a>尽可能获取信息</h5><p>一切环境准备就绪后，我们先来看一下这个安装包有没有告诉我们什么信息</p><p>简单看过之后是需要我们启动另一个activity，然后点击一万次就会给我们flag，手动点应该也能出，但正常思路肯定不是这样的</p><p>试想它一定是按照一处判断条件来决定给不给flag，如果我们直接在比较的地方，将比较的数值改为1就可以，这样点击一次就可以出现flag，然后再次安装，剩下的事情就不用多说了，现在开始操作</p><h5 id="解包"><a href="#解包" class="headerlink" title="解包"></a>解包</h5><p>下载apktool  <a href="https://ibotpeaches.github.io/Apktool/">https://ibotpeaches.github.io/Apktool/</a> 这个工具作用就是将apk反编译和重新打包</p><p>java -jar apktool.jar d xxx.apk -o xxx或者apktool.bat -r d xxx.apk   &#x2F;&#x2F;不解码资源文件才可以回编译成功</p><p>我们去找那个判断的地方，是在文件夹的目录下G:\tools\apktools\apk\smali\com\droidlearn\activity_travel\FlagActivity$1.smali</p><p>里面找关键数据，找到了一个数字0x2710，是十进制的10000，我们将它改成1，就这一个地方能看猜到应该是判断，看不懂代码，就先尝试一下，毕竟学习要用于试错，其实也是因为自己有点笨，搞了挺久的，改完之后保存</p><h5 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h5><p>java -jar apktool.jar b xxx -o xxx.apk或者apktool.bat b xxx</p><p>打包这里可能报错，因为我就栽在了这里，老是报错啥can’t open xxx，我以为是我那路径的文件不给他访问，然后就去看怎么改一下权限，弄成任意访问，各种尝试没鸡毛用</p><p>我在解包那里就已经说到这个报错的解决办法了，就是加上-r，不要解码资源文件，如果不注意就慢慢找报错的处理办法吧，可能我当时的思路不太对，花了挺久</p><h5 id="再次安装"><a href="#再次安装" class="headerlink" title="再次安装"></a>再次安装</h5><p>连接安卓模拟器 adb  devices</p><p>尝试安装 adb install xxx.apk</p><p>但是又报错，好像是没有签名文件</p><h5 id="生成口令文件并签名"><a href="#生成口令文件并签名" class="headerlink" title="生成口令文件并签名"></a>生成口令文件并签名</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">keytool</span> -genkey -alias testalias -keyalg RSA -keysize <span class="hljs-number">2048</span> -validity <span class="hljs-number">36500</span> -keystore test.keystore<br></code></pre></td></tr></table></figure><p>用keytool，距离原理不清楚，我是找的别人的命令来跑的，因为是第一次尝试搞apk(如果有大佬的话希望可以解释一下)</p><p>然后就随便输入吧，最后输入生成口令文件</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff">jarsigner -verbose -keystore test.keystore -storepass 11111111 -signedjar flag.apk apk.apk testalias<br><br><span class="hljs-deletion">-keystore +口令文件</span><br><span class="hljs-deletion">-sotrepass +签名口令密码</span><br><span class="hljs-deletion">-signedjar后跟三个参数 分别是签名后的apk文件 需要签名的apk文件 签名的别名</span><br></code></pre></td></tr></table></figure><p>路径问题在这里就不细说了，自己调整一下文件的位置就可以</p><h5 id="再次安装-1"><a href="#再次安装-1" class="headerlink" title="再次安装"></a>再次安装</h5><p>adb  install xxx.apk</p><p>这里又报错，急急急！！！</p><p>可能是因为一样的apk，别问改了数据还一样不，求同存异，小改不是改，把之前安装的卸载了就可以安装成功</p><p>终于有success了</p><p>现在来调用我们的FlagActivity</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">am <span class="hljs-built_in">start</span> -n 包名/包名.活动名  <span class="hljs-comment"> //启动一个指定活动</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">am start -n com<span class="hljs-selector-class">.droidlearn</span>.activity_travel/com<span class="hljs-selector-class">.droidlearn</span><span class="hljs-selector-class">.activity_travel</span>.FlagActivity<br></code></pre></td></tr></table></figure><p>这玩意就可以跳到我们想要的界面，点一次flag会在下面弹出来，一会又会消失，小问题，再点一次</p><p>思路很简单，但是解决报错还是花了不少时间</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/18/C%E5%AF%B9%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/10/18/C%E5%AF%B9%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="记录第一次对文件进行的一些操作"><a href="#记录第一次对文件进行的一些操作" class="headerlink" title="记录第一次对文件进行的一些操作"></a>记录第一次对文件进行的一些操作</h3><p>​  在一指定路径下创建一个txt，并录入任意数量人的年龄和姓名，进行遍历</p><h6 id="c代码实现"><a href="#c代码实现" class="headerlink" title="c代码实现"></a>c代码实现</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;errno.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">files</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> ages;<br><span class="hljs-type">char</span> name[<span class="hljs-number">32</span>];<br>&#125;files,*pfiles;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">input_files</span><span class="hljs-params">(FILE **fp1)</span><br>&#123;<br>files input=&#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;年龄:&quot;</span>);<br>scanf_s(<span class="hljs-string">&quot;%d&quot;</span>,&amp;(input.ages));<br><span class="hljs-keyword">if</span>(input.ages==<span class="hljs-number">0</span>)<span class="hljs-comment">//设置循环结束条件</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名:&quot;</span>);<br>scanf_s(<span class="hljs-string">&quot;%s&quot;</span>,input.name,<span class="hljs-number">31</span>);<br>fwrite(&amp;input,<span class="hljs-keyword">sizeof</span>(files),<span class="hljs-number">1</span>,*fp1);<span class="hljs-comment">//录入数据</span><br>&#125;<br>fclose(*fp1);<br><br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">output_files</span><span class="hljs-params">(FILE **fp2)</span><br>&#123;<br>files output=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">size_t</span> check=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//X:\\XXXXXX\\XXXX.txt是文件路径</span><br><span class="hljs-type">errno_t</span> err=fopen_s(*fp2,<span class="hljs-string">&quot;X:\\XXXXXX\\XXXX.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-comment">//以读的方式打开</span><br><span class="hljs-keyword">if</span>(err==<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;成功打开！\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">while</span>(!feof(*fp2))<span class="hljs-comment">//遍历操作</span><br>&#123;<br>check=fread(&amp;output,<span class="hljs-keyword">sizeof</span>(files),<span class="hljs-number">1</span>,*fp2);<br><span class="hljs-keyword">if</span>(check==<span class="hljs-number">0</span>)<span class="hljs-comment">//fread()函数读取不成功或读到文件末尾返回0，作为循环结束条件</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ages:%d names:%s\n&quot;</span>,output.ages,output.name);<br>&#125;<br>fclose(*fp2);<br><br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>FILE *fp=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//X:\\XXXXXX\\XXXX.txt是文件路径</span><br><span class="hljs-type">errno_t</span> err=fopen_s(&amp;fp,<span class="hljs-string">&quot;X:\\XXXXXX\\XXXX.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-comment">//w,a,w+,a+都可以在没有对应打开文件的情况下创建该文件</span><br><span class="hljs-keyword">if</span>(err!=<span class="hljs-number">0</span>||fp==<span class="hljs-literal">NULL</span>)<br>&#123; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建失败！&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//此处不关闭文件，等把数据录入之后再关闭</span><br>input_files(&amp;fp);<br>output_files(&amp;fp);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​用010editor打开并以十六进制查看，如下图</p><p>!<img src="//tvax4.sinaimg.cn/large/0081aNtNly1h3ey41k3alj30km05mwiq.jpg" alt="image-20220619215757947"></p><p>​        从图中可以明显看到是有很多的无用数据，因为我们设置的name数组是要比实际名字占用的内存大很多，会造成空间浪费。</p><p>​从这方面考虑，年龄用一个字节就已经足够表示，用四个字节的int类型显得有点多余</p><p>​我们可以在录入一个整数来记录每个名字的长度</p><h6 id="基于以上，用c代码实现"><a href="#基于以上，用c代码实现" class="headerlink" title="基于以上，用c代码实现"></a>基于以上，用c代码实现</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">files</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> ages;                             <span class="hljs-comment">//char占一个字节，省空间</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">32</span>];<br>&#125;files,*pfiles;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">input_files</span><span class="hljs-params">(FILE **fp1)</span>               <span class="hljs-comment">//传指针</span><br>&#123;<br>files input=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">char</span> len=<span class="hljs-number">0</span>;                            <span class="hljs-comment">//len也设置为char类型</span><br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;年龄:&quot;</span>);<br>scanf_s(<span class="hljs-string">&quot;%d&quot;</span>,&amp;(input.ages));<br><span class="hljs-keyword">if</span>(input.ages==<span class="hljs-number">0</span>)                  <span class="hljs-comment">//设置循环结束条件</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名:&quot;</span>);<br>scanf_s(<span class="hljs-string">&quot;%s&quot;</span>,input.name,<span class="hljs-number">31</span>);<br>len=<span class="hljs-built_in">strlen</span>(input.name);            <span class="hljs-comment">//用len记录名字的长度</span><br>fwrite(&amp;len,<span class="hljs-keyword">sizeof</span>(len),<span class="hljs-number">1</span>,*fp1);<br>fwrite(&amp;(input.ages),<span class="hljs-keyword">sizeof</span>(input.ages),<span class="hljs-number">1</span>,*fp1);<span class="hljs-comment">//录入年龄(char类型比int类型小3个Byte)</span><br>fwrite(input.name,len,<span class="hljs-number">1</span>,*fp1);     <span class="hljs-comment">//只存len个字节，后面空闲的不存</span><br>&#125;<br>fclose(*fp1);<br><br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">output_files</span><span class="hljs-params">(FILE **fp2)</span>              <span class="hljs-comment">//传指针</span><br>&#123;<br>files output=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">size_t</span> check=<span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> len=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//X:\\XXXXXX\\XXXX.txt是文件路径</span><br><span class="hljs-type">errno_t</span> err=fopen_s(*fp2,<span class="hljs-string">&quot;X:\\XXXXXX\\XXXX.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-comment">//以读的方式打开</span><br><span class="hljs-keyword">if</span>(err==<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;成功打开！\n&quot;</span>);<br>&#125;<br><span class="hljs-comment">//遍历操作</span><br><span class="hljs-keyword">while</span>(!feof(*fp2))                      <span class="hljs-comment">//cheak要有，只有feof判断貌似无法正常运行，大佬随意</span><br>&#123;<br>check=fread(&amp;len,<span class="hljs-keyword">sizeof</span>(len),<span class="hljs-number">1</span>,*fp2);<br><span class="hljs-keyword">if</span>(check==<span class="hljs-number">0</span>)                        <span class="hljs-comment">//fread()函数读取不成功或读到文件末尾返回0，作为循环结束条件</span><br><span class="hljs-keyword">break</span>;<br>fread(&amp;output.ages,<span class="hljs-keyword">sizeof</span>(output.ages),<span class="hljs-number">1</span>,*fp2);<br>fread(output.name,len,<span class="hljs-number">1</span>,*fp2);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ages:%d names:%s\n&quot;</span>,output.ages,output.name);<br>&#125;<br>fclose(*fp2);<br><br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>FILE *fp=<span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//X:\\XXXXXX\\XXXX.txt是文件路径</span><br><span class="hljs-type">errno_t</span> err=fopen_s(&amp;fp,<span class="hljs-string">&quot;X:\\XXXXXX\\XXXX.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-comment">//w,a,w+,a+都可以在没有对应打开文件的情况下创建该文件</span><br><span class="hljs-keyword">if</span>(err!=<span class="hljs-number">0</span>||fp==<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建失败！&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//此处不关闭文件，等把数据录入之后再关闭</span><br>input_files(&amp;fp);<br>output_files(&amp;fp);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>之后我们再用010Editor打开，如下图</p><p><img src="//tva3.sinaimg.cn/large/0081aNtNly1h3ey4fzq7yj30kb03ata6.jpg" alt="image-20220619233728751"></p><p>这样就完成了空间优化！</p><p>注意：文件打开和关闭要配套，不然会一直处于打开状态；</p><p>​            char类型可以以%d形式输出</p><p>​            feof()和cheak要配套使用，但用一个貌似不可以（欢迎大佬指正）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/18/Cruehead.1/"/>
    <url>/2022/10/18/Cruehead.1/</url>
    
    <content type="html"><![CDATA[<h1 id="Cruehead-1破解"><a href="#Cruehead-1破解" class="headerlink" title="Cruehead.1破解"></a>Cruehead.1破解</h1><p>先放在die里看一下</p><p><img src="//tva4.sinaimg.cn/large/0081aNtNly1h5x76gyxzsj30mk0cu0wf.jpg" alt="die"></p><p>然后拖进OD看一下程序执行流程</p><p>了解了大概的执行流程后先搜索一下字符串，看看有没有什么关键字眼</p><p><img src="//tva2.sinaimg.cn/large/0081aNtNly1h5x7du1wvij30gm06h0xl.jpg" alt="搜索字符串"></p><p>这个Good work应该就是我们要找的地方了，点进去</p><p><img src="//tvax4.sinaimg.cn/large/0081aNtNly1h5x7eixiozj30tc0f3qac.jpg" alt="关键字眼位置"></p><p>看一下上下是没有关键跳转的，那这个时候这个思路就行不通了，我们尝试用ctrl+R来找到到底怎么操作才可以跳到这里，就是查找参考-&gt;选定命令</p><p><img src="//tva4.sinaimg.cn/large/0081aNtNly1h5x7hug80bj30w10iyn5t.jpg" alt="操作"></p><p><img src="//tva1.sinaimg.cn/large/0081aNtNly1h5x7i38w0zj30b4026dgd.jpg" alt="找到的参考"></p><p><img src="//tvax1.sinaimg.cn/large/0081aNtNly1h5x7i8sm1dj30kq03zgnd.jpg" alt="关键跳转"></p><p>我们就是为了修改程序流程，让它直接输出Good work,所以就采用简单粗暴的办法，直接将je命令改成jmp，这样它就一定会跳转了</p><p><img src="//tva3.sinaimg.cn/large/0081aNtNly1h5x7lh6xk6j30ll04t401.jpg" alt="构造恒跳转"></p><p>然后我们让程序跑起来，得到</p><p><img src="//tvax2.sinaimg.cn/large/0081aNtNly1h5x7lyv8zjj308s05pmxm.jpg" alt="结果"></p><p>菜鸟做法！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/18/BUU%E9%A2%98%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/10/18/BUU%E9%A2%98%E7%9B%AE%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="FlareOn6-Overlong"><a href="#FlareOn6-Overlong" class="headerlink" title="[FlareOn6]Overlong"></a>[FlareOn6]Overlong</h1><p>是32位无壳程序，点开会得到一弹窗</p><p><img src="//tvax3.sinaimg.cn/large/0081aNtNly1h6fnz6stj3j306v052aa6.jpg" alt="运行结果"></p><p>看到不知道具体要注意什么，拖到IDA看，搜到的字符串很少，只有一个output，跟踪一下，是start函数，有一个弹窗，我没有看懂它在做什么，只是觉得那一串极长的字符串应该是重点</p><p>看了一下大神<a href="https://www.cnblogs.com/Mayfly-nymph">Hk_Mayfly</a>的博客明白了怎么操作</p><p><img src="//tvax2.sinaimg.cn/large/0081aNtNly1h6fo6h8rx2j30e206640u.jpg" alt="IDA"></p><p>sub_401160这个函数，第三个参数可能是操作字符的长度，但是unk_402000实际比0x1c大得多，所以我们尝试在汇编中将这个参数改成unk_402000的字符串长度，即使不知道为什么，但这个地方我们知道有点小问题，尝试改一下总没错我们去汇编中找到对应的汇编指令，unk_402000的长度是0xb1</p><h4 id="注"><a href="#注" class="headerlink" title="注:"></a>注:</h4><p>我们需要将0x1c压入栈中，在栈中修改（因为修改代码会导致后面的代码偏移改变）</p><p><img src="//tvax1.sinaimg.cn/large/0081aNtNly1h6foc2wv7cj310q0k6kaz.jpg" alt="OD修改汇编"></p><p><img src="//tva4.sinaimg.cn/large/0081aNtNly1h6focv3067j30bv043t95.jpg" alt="get flag"></p><p>后面就是flag</p><h1 id="WUSTCTF2020-Cr0ssfun"><a href="#WUSTCTF2020-Cr0ssfun" class="headerlink" title="[WUSTCTF2020]Cr0ssfun"></a>[WUSTCTF2020]Cr0ssfun</h1><p><img src="//tvax4.sinaimg.cn/large/0081aNtNly1h6fogyfuhsj30kv0g0n4r.jpg" alt="main函数"></p><p>很明显直接进check，这个就是一直套，慢慢的给出数据，自己排列即可得到数据</p><h1 id="FlareOn4-IgniteMe"><a href="#FlareOn4-IgniteMe" class="headerlink" title="[FlareOn4]IgniteMe"></a>[FlareOn4]IgniteMe</h1><p>无壳32位程序，丢进IDA</p><p><img src="//tva4.sinaimg.cn/large/0081aNtNly1h6fom6wu0bj30oq0a0jx6.jpg" alt="main函数"></p><p><img src="//tva2.sinaimg.cn/large/0081aNtNly1h6foopyomsj30iw0hatfk.jpg" alt="sub_4010F0函数"></p><p>这个函数是将输入中的’\n’和’\r’扔掉，将其他的继续进行后续处理</p><p><img src="//tvax4.sinaimg.cn/large/0081aNtNly1h6foqyy0nej30jn0ecte3.jpg" alt="sub_401050函数"></p><p>将字符倒着处理，最后一个和v4异或，随后就是倒数第二个和倒数第一个字符异或存在倒数第二个位置，以此类推，这就是全部操作了，byte_403000是已经操作完的字符串，根据异或特性我们再次异或即可</p><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">unsigned</span> __int8 str[]=&#123;<br><span class="hljs-number">0x0D</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x6C</span>,<br><span class="hljs-number">0x5D</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x6E</span>,<br><span class="hljs-number">0x56</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x13</span>,<br><span class="hljs-number">0x17</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x69</span>, <span class="hljs-string">&#x27;\0&#x27;</span><br>&#125;;<br><span class="hljs-type">unsigned</span> __int8 flag[<span class="hljs-number">40</span>];<br><br><span class="hljs-type">int</span> v4=<span class="hljs-number">4</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">38</span>; i&gt;=<span class="hljs-number">0</span>; --i)<br>&#123;<br>flag[i]=v4^str[i];<br>v4=flag[i];<br>&#125;<br>flag[<span class="hljs-number">39</span>]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">40</span>;++j)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,flag[j]);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="GWCTF-2019-xxor"><a href="#GWCTF-2019-xxor" class="headerlink" title="[GWCTF 2019]xxor"></a>[GWCTF 2019]xxor</h1><p>Ubuntu64位文件，可以放进虚拟机跑一下看一下程序流程，丢进IDA</p><p><img src="//tva2.sinaimg.cn/large/0081aNtNly1h6foznaiduj30h30grqag.jpg" alt="main函数"></p><p><img src="//tvax2.sinaimg.cn/large/0081aNtNly1h6fp09ebj4j30ku07iwhm.jpg" alt="关键跳"></p><p>很明显，中间的这块代码就是我们需要分析清楚的</p><p>我这里的第二个for循环很奇怪，看一下汇编就知道它真正的操作</p><p>第一个for循环就是输入</p><p>第二个是加密操作</p><p>关于LODWORD和HIDWORD，可以看一下<a href="https://reverseengineering.stackexchange.com/questions/8296/whats-the-function-of-lodword-and-hidword">https://reverseengineering.stackexchange.com/questions/8296/whats-the-function-of-lodword-and-hidword</a></p><p>把他理解成将操作完的字符串给到v7即可</p><p>重点分析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">a2 = (<span class="hljs-type">char</span> **)&amp;unk_601060;<br>sub_400686(&amp;dword_601078, &amp;unk_601060);<br></code></pre></td></tr></table></figure><p>上面的unk_601060是个数组，存为key[4]&#x3D;{2,2,3,4};</p><p>下面的sub_400686函数就是加密操作，有点像tea加密，类似的解密操作，sum的值给出了</p><p>进行解密操作尝试能否解出flag</p><p>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> <span class="hljs-keyword">warning</span>(disable:4996)</span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> str[]=&#123;<br><span class="hljs-number">0xDF48EF7E</span>, <span class="hljs-number">0x20CAACF4</span>, <span class="hljs-number">0xe0f30fd5</span>, <span class="hljs-number">0x5c50d8d6</span>, <span class="hljs-number">0x9e1bde2d</span>, <span class="hljs-number">0x84F30420</span>, <span class="hljs-string">&#x27;\0&#x27;</span><br>&#125;;<br><span class="hljs-type">int</span> key[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-type">int</span> sum;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flag[]=&#123;<span class="hljs-number">0x66</span>,<span class="hljs-number">0x6c</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x7b</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x5f</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x5f</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x21</span>,<span class="hljs-number">0x7d</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">5</span>;)<br>&#123;<br>sum=<span class="hljs-number">0x458BCD42</span>*<span class="hljs-number">0x40</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;=<span class="hljs-number">63</span>; ++i)<br>&#123;<br>str[j+<span class="hljs-number">1</span>]-=(str[j]+sum+<span class="hljs-number">20</span>)^((str[j]&lt;&lt;<span class="hljs-number">6</span>)+key[<span class="hljs-number">2</span>])^((str[j]&gt;&gt;<span class="hljs-number">9</span>)+key[<span class="hljs-number">3</span>])^<span class="hljs-number">0x10</span>;<br>str[j]-=(str[j+<span class="hljs-number">1</span>]+sum+<span class="hljs-number">11</span>)^((str[j+<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">6</span>)+key[<span class="hljs-number">0</span>])^((str[j+<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">9</span>)+key[<span class="hljs-number">1</span>])^<span class="hljs-number">0x20</span>;<br>sum-=<span class="hljs-number">0x458BCD42</span>;<br>&#125;<br>j+=<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">6</span>;++k)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#x,&quot;</span>,str[k]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> m=<span class="hljs-number">0</span>;m&lt;<span class="hljs-number">19</span>;m++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,flag[m]);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>自己写的时候老是输出不对，以为自己分析错了，返回看IDA漏掉了哪一步，也没有发现有其他的操作，那就可能是输出的问题，跟别的师傅的wp 对照了一下，是小端排序的问题，没有理解透彻，所以气急败坏，另起一个flag数组，将解密完的十六进制手改成一个字节一个字节输出，不对就调换位置，只有大端和小端，都尝试一遍总该出了吧</p><h1 id="WUSTCTF2020-level3"><a href="#WUSTCTF2020-level3" class="headerlink" title="[WUSTCTF2020]level3"></a>[WUSTCTF2020]level3</h1><p><img src="//tvax1.sinaimg.cn/large/0081aNtNly1h6fpgf5pfmj30vz0hkn5k.jpg" alt="main函数"></p><p>base64，在搜索字符串也看到了一般的base64表，去网站解密，但是输出不对</p><p>根据下面的提示应该是变表根据交叉引用找到魔改base64表的位置</p><p><img src="//tva4.sinaimg.cn/large/0081aNtNly1h6fpj61s0jj30ps09v7fp.jpg" alt="查找引用"></p><p>O_OLookAtYou函数就是操作base64表</p><p>是将前20位字符进行对换，第1位和第20位换，2和19，以此类推，得到变表，再进行解密</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> string<br><br>str1 = <span class="hljs-string">&#x27;d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD==&#x27;</span><span class="hljs-comment">#.swapcase()   #需要大小写互换就用swapcase()</span><br>string1 = <span class="hljs-string">&quot;TSRQPONMLKJIHGFEDCBAUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><span class="hljs-comment"># 更改后的密码表</span><br>string2 = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br><br><span class="hljs-built_in">print</span>(base64.b64decode(str1.translate(<span class="hljs-built_in">str</span>.maketrans(string1, string2))))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/18/BUU-CrackRTF/"/>
    <url>/2022/10/18/BUU-CrackRTF/</url>
    
    <content type="html"><![CDATA[<h1 id="BUU-CrackRTF"><a href="#BUU-CrackRTF" class="headerlink" title="BUU-CrackRTF"></a>BUU-<strong>CrackRTF</strong></h1><p>在die里面扫一眼</p><p><img src="//tva4.sinaimg.cn/large/0081aNtNly1h62rvv43jwj30me0fbjwq.jpg" alt="die"></p><p>点开程序提示输入密码，随便随一个窗口直接关闭了</p><p>用IDA32分析程序</p><h4 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main<strong>函数</strong></h4><p>找到main函数F5</p><p><img src="C:\Users\亦安\AppData\Roaming\Typora\typora-user-images\image-20220911170534333.png" alt="image-20220911170534333"></p><p>这两个长长的字串看起来是有用的，其他的字眼也提示我们可以通过这些关键字眼找到关键位置，找到用这些字串的位置，其实也就是main函数</p><p><img src="//tva3.sinaimg.cn/large/0081aNtNly1h62s1bd26ij30lm0hsak6.jpg" alt="main0"></p><p><img src="//tvax2.sinaimg.cn/large/0081aNtNly1h62s262o34j30ks0hkqb0.jpg" alt="main1"></p><p>先理清这个函数的逻辑</p><p>可以看到passwd分为两部分处理，我们要一个一个分析</p><h4 id="passwd-1"><a href="#passwd-1" class="headerlink" title="passwd(1)"></a>passwd(<strong>1</strong>)</h4><p>先看前半个，输入一个字串，提示我们时6个字符，atoi函数将我们输入的字符串转成了数字，跟100000作比较，小于的话就结束程序，然后在我们输入的字串后拼接一个字串—-“@DBApp”，对拼接后的字串进行处理，如果string1和那一长串字符相等，就继续输入下半段密码</p><p>大体逻辑知道了，就关键看怎么处理的输入字串，点金if语句上面的函数</p><p><img src="//tva1.sinaimg.cn/large/0081aNtNly1h62scstcwgj30k20hiajd.jpg" alt="sha1算法"></p><p>搜索一下划红线的函数，时windows的加密函数，第二个参数就是加密方式，结合外面的字串是40个十六进制数，可以猜到是sha1算法，又提示我们转成数字了，所以我们爆破一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> numpy.core.defchararray <span class="hljs-keyword">import</span> lower<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100000</span>, <span class="hljs-number">1000000</span>):<br>    flag = <span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;@DBApp&quot;</span><br>    sha1 = hashlib.sha1(flag.encode())<br>    sha1_str = lower(<span class="hljs-string">&quot;6E32D0943418C2C33385BC35A1470250DD8923A9&quot;</span>)<br>    <span class="hljs-keyword">if</span> sha1.hexdigest() == sha1_str:<br>        <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>结果：123321@DBApp</p><p>输入前六位数字到程序中测试一下，前半段密码是正确的</p><h4 id="passwd-2"><a href="#passwd-2" class="headerlink" title="passwd(2)"></a><strong>passwd</strong>(2)</h4><p>跟上面的套路基本相同，将脚本跑出的字串拼接在第二次输入字串的后面，并没有将输入的字符转成数字，同样进入if语句上面的函数</p><p><img src="//tvax4.sinaimg.cn/large/0081aNtNly1h62skpy48oj30kb0h1k0q.jpg" alt="MD5算法"></p><p>这个跟上面的是一样的套路，但是参数不同，搜一下好像是md5，结合外面的字串是32个十六进制数，基本确定就是MD5，但是他是输入六个字符，这范围也太大了，爆破就别想了</p><p>那这时候我们就接着往下看有没有其他的函数可以解决这个问题</p><p>下面有个提示error的地方，当然我们是要让程序不输出error，所以if里面的条件需要是真，点进去看</p><p><img src="//tva3.sinaimg.cn/large/0081aNtNly1h62sq5i0uaj30o80h6dqc.jpg" alt="关于怎么解决md5算法的函数"></p><p>这两个关键函数搜一下能有一点点头绪</p><h5 id="FindResourceA"><a href="#FindResourceA" class="headerlink" title="FindResourceA"></a><strong>FindResourceA</strong></h5><p>如果函数运行成功，那么返回值为指向被指定资源信息块的句柄。 为了获得这些资源，将这个句柄传递给LoadResource函数。 如果函数运行失败，则返回值为NULL。</p><p>它的出现常常伴随着SizeofResource()、LoadResource()</p><h5 id="CreateFileA"><a href="#CreateFileA" class="headerlink" title="CreateFileA"></a><strong>CreateFileA</strong></h5><p>名字很明显，就是创建文件，这个是看了别的师傅的思路才知道这块要联想到文件头那里去，就知道怎么回事了</p><h5 id="RTF文件头"><a href="#RTF文件头" class="headerlink" title="RTF文件头"></a>RTF<strong>文件头</strong></h5><p>{\rtf1\ansi\ansicpg936\deff0\deflang1033等等等</p><h5 id="异或"><a href="#异或" class="headerlink" title="异或"></a><strong>异或</strong></h5><p>创建函数的上面的函数就是进行了输入的字串和AAA中的数据进行了异或</p><p><img src="//tvax3.sinaimg.cn/large/0081aNtNly1h62svme78uj30io0a8djk.jpg" alt="异或"></p><h5 id="resource-hacker"><a href="#resource-hacker" class="headerlink" title="resource hacker"></a>resource <strong>hacker</strong></h5><p>这个程序我们可以看到AAA资源数据</p><p><img src="//tvax2.sinaimg.cn/large/0081aNtNly1h62t2mojnoj31680dxafx.jpg" alt="resource hacker"></p><p>既然创建文件，那肯定少不了文件头，同时也要结合我们之前已知的信息，是六个字符，所以我们只取文件头的前六位和AAA数据的前六位进行异或</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">guess_str = <span class="hljs-string">&quot;&#123;\\rtf1&quot;</span><br>file_str = <span class="hljs-selector-attr">[0x05,0x7D,0x41,0x15,0x26,0x01]</span><br>flag2 = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(guess_str)):<br>x = <span class="hljs-built_in">ord</span>(guess_str<span class="hljs-selector-attr">[i]</span>) ^ file_str<span class="hljs-selector-attr">[i]</span><br>flag2 += <span class="hljs-built_in">chr</span>(x)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(flag2)</span></span><br></code></pre></td></tr></table></figure><p>结果：~!3a@0</p><p>到现在我们已经将两块password得到了，输入到程序试一下是否正确，输入完之后发现程序运行完了，这个时候并不是错了，我们会看到在同目录下生成了一个rtf文件，点开就是flag</p><p>Flag{N0_M0re_Free_Bugs}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/18/BUU--%E7%9B%B8%E5%86%8C/"/>
    <url>/2022/10/18/BUU--%E7%9B%B8%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<p>是个apk文件，提示不要安装到手机上，所以就不要预览了</p><p>我们拖进jeb看一下，找一下有没有和邮箱相关的</p><p><img src="//tva4.sinaimg.cn/large/0081aNtNly1h6zef9xj2hj30uc0lq17g.jpg" alt="题目提示"></p><p>看一下交叉引用</p><p><img src="//tva2.sinaimg.cn/large/0081aNtNly1h6zeflsxtyj30on0d47ar.jpg" alt="交叉引用的结果"></p><p>看着像是关键位置，但是我看不到有flag的影子，而且里面还有base64什么玩意，我也没找到像是base64编码的</p><p>看了别的师傅的wp，才知道要去so层看，拖进ida搜索字符串就可以看到，这里就不演示了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/18/2022%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84re2/"/>
    <url>/2022/10/18/2022%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84re2/</url>
    
    <content type="html"><![CDATA[<h1 id="2022网鼎杯青龙组re2"><a href="#2022网鼎杯青龙组re2" class="headerlink" title="2022网鼎杯青龙组re2"></a>2022网鼎杯青龙组re2</h1><p>先将拿到的程序拖进die看一下,很明显有一个upx的壳</p><p><img src="//tva2.sinaimg.cn/large/0081aNtNly1h5mkvc0ppvj30jj0a7tbu.jpg" alt="DIE截图"></p><p>但拖进free UPX发现检测不到有壳</p><p><img src="//tvax3.sinaimg.cn/large/0081aNtNly1h5mkwqsfyaj30lo02zmxx.jpg" alt="Free UPX"></p><p>我们在拖进010Editor看一下</p><p><img src="//tva3.sinaimg.cn/large/0081aNtNly1h5mkxzpqw2j307l043gm7.jpg" alt="010Editor"></p><p>发现两个很奇怪的字串FUK0和FUK1，对比一下一个正常的程序加了UPX壳应该是UPX0和UPX1，尝试修改</p><p>然后再拖进Free UPX，可以检测到了，脱完壳之后就可以拖进IDA分析了</p><p><img src="//tva1.sinaimg.cn/large/0081aNtNly1h5mldw05hnj30pg0i54ah.jpg" alt="main函数"></p><p>可以看到main函数已经被完全加载出来了</p><p>分析之后，有个奇怪的地方，处理的是v4字符串，要进行0x14次，也就是20次，但v4一才有15个值，中间还掺着一个v5，点进去看一下</p><p>v4:</p><p><img src="//tva1.sinaimg.cn/large/0081aNtNly1h5mlhmufs0j30d40f2113.jpg" alt="v4"></p><p>v5:</p><p><img src="//tva2.sinaimg.cn/large/0081aNtNly1h5mlil0pm6j30ct0fdtg1.jpg" alt="v5"></p><p>可以看到v4和v5是连在一块的，可能是伪代码分析不够准确，但这些数据加起来确实等于20，应该不是巧合，把这些数据提取下来组成一个char数组，方便一会进行处理。</p><p>处理字符的操作：</p><p><img src="//tva4.sinaimg.cn/large/0081aNtNly1h5mlm2zzjyj30e205umzr.jpg" alt="处理"></p><p>直接将这一段copy下来，放到刚才写的c程序中，输出一下看看结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> flag[]=&#123;<br>  <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x79</span>, <br>  <span class="hljs-number">0x13</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x64</span>,  <br>&#125;;<br><span class="hljs-type">int</span> i,j; <br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-keyword">sizeof</span>(flag);++i)&#123;<br>flag[i]^=<span class="hljs-number">0x50</span>u;<br>flag[i]-=<span class="hljs-number">10</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-keyword">sizeof</span>(flag);++j)<br>&#123;<br>flag[j]^=<span class="hljs-number">0x66</span>u;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,flag[j]);<br>&#125;<br><br>getchar(); <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125; <br></code></pre></td></tr></table></figure><p>输出结果：<img src="//tva1.sinaimg.cn/large/0081aNtNly1h5mlqsfgiwj307g0160sr.jpg" alt="FLAG"></p><p>加上flag{},提交一下是正确的</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/18/2022%E7%BD%91%E9%BC%8E%E6%9D%AF%E6%9C%B1%E9%9B%80%E7%BB%84easyre%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/10/18/2022%E7%BD%91%E9%BC%8E%E6%9D%AF%E6%9C%B1%E9%9B%80%E7%BB%84easyre%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="2022网鼎杯朱雀组easyre复现"><a href="#2022网鼎杯朱雀组easyre复现" class="headerlink" title="2022网鼎杯朱雀组easyre复现"></a>2022网鼎杯朱雀组easyre复现</h1><p>先将文件拖进DIE看一下</p><p><img src="//tvax3.sinaimg.cn/large/0081aNtNly1h5pprizx33j30ml0cz433.jpg" alt="die查看"></p><p>接着用IDA查看，分析一下伪代码</p><p><img src="//tva3.sinaimg.cn/large/0081aNtNly1h5psh6dxqvj30la0hktix.jpg" alt="变量定义"></p><h3 id="RC4加密"><a href="#RC4加密" class="headerlink" title="RC4加密"></a>RC4加密</h3><p><img src="//tva4.sinaimg.cn/large/0081aNtNly1h5pshxm3d1j30nx0hoth4.jpg" alt="RC4-1"></p><p><img src="C:\Users\亦安\AppData\Roaming\Typora\typora-user-images\image-20220831113214080.png" alt="image-20220831113214080"></p><p>从上面两张图可以看出这个加密方式很有可能是RC4加密</p><p>有很多256的字眼，初始化一个有256个元素的数组，将key放在另一个数组里，此数组剩下的元素全部初始化，然后对Sbox进行操作，用来加密数据，而且RC4是将数据一个字节一个字节进行异或加密，由于异或运算的特殊性，所以逆向的时候也是一样的</p><h3 id="TEA加密"><a href="#TEA加密" class="headerlink" title="TEA加密"></a>TEA加密</h3><p><img src="//tva3.sinaimg.cn/large/0081aNtNly1h5pswb6x4vj30zq0h8do2.jpg" alt="TEA算法"></p><p><img src="//tva4.sinaimg.cn/large/0081aNtNly1h5q51kt9rbj30e702l0t0.jpg" alt="补充"></p><p>从这个do while循环可以看出是TEA加密</p><p>TEA 算法使用 64 位的明文分组和 128 位的密钥，</p><p>使用 Feistel 分组加密框架，建议的迭代次数为 32 轮。该算法使用了一个常数 δ 作为倍数，它来源于黄金比率，以保证每一轮加密都不相同。但 δ 的精确值似乎并不重要，这里 TEA 把它定义为 δ&#x3D;「(√5 - 1)231」（也就是程序中的 0×9E3779B9）</p><p>注：按照这里来说，v13-&#x3D;0x61c88647和v13+&#x3D;0x9e3779b9是一样的</p><p>分析伪代码可以得到DELTA&#x3D;0x9e3779b9，key有0x1234,0x5678,0x8265,0x4523,是一个unsigned int数组</p><p>剩下的就是加密完的数据、异或的数据和sum的值，也就是v13的值</p><h4 id="加密完的数据"><a href="#加密完的数据" class="headerlink" title="加密完的数据"></a>加密完的数据</h4><p>我们可以看到在最后的地方有win的字眼，往前推是一个循环，如果进入循环就会退出程序，所以我们要让程序不进入循环，这里的if语句判断条件暗示我们flag就是Arglist数组（根据程序最开始的提示推知），这里的意思是它等于v25中的数据，我们翻到上面去找v25，但是他只有40个字节，很奇怪，下面还有一个单独的</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">_i<span class="hljs-symbol">nt16</span> v<span class="hljs-number">26</span><br></code></pre></td></tr></table></figure><p> 数据，我们点进去看一下他们的存放位置，跟v25有没有关系</p><p><img src="//tvax1.sinaimg.cn/large/0081aNtNly1h5ptabga5ej30hp07zjv1.jpg" alt="v25数组"></p><p>这是v25数组的位置</p><p><img src="//tvax4.sinaimg.cn/large/0081aNtNly1h5ptbb0gj0j30go07vadg.jpg" alt="v26的位置"></p><p>这是v26的位置</p><p>发现他们两个数据是连在一起的，而且他们加起来正好是42个字节，符合flag 条件，应该就是这里了，我们将这个数据提取到一个数组里，这是加密后的flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> data[<span class="hljs-number">12</span>]=&#123;<br><span class="hljs-number">0x1C30FE24</span>,<span class="hljs-number">0xA34C7D11</span>,<span class="hljs-number">0x6F106E38</span>,<span class="hljs-number">0x3EBDE0C4</span>,<span class="hljs-number">0x400FC847</span>,<br><span class="hljs-number">0x752FF41A</span>,<span class="hljs-number">0xF13DDEBA</span>,<span class="hljs-number">0x6C7835C6</span>,<span class="hljs-number">0xFD3E6948</span>,<span class="hljs-number">0x9DFD7447</span>,<br><span class="hljs-number">0x2F</span>,<span class="hljs-number">0x66</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="异或的数据提取"><a href="#异或的数据提取" class="headerlink" title="异或的数据提取"></a>异或的数据提取</h4><p>这个稍微麻烦一点，我们要将程序跑起来，下一个断点在76行的位置，将al寄存器的的值提取出来，一共是42个数据</p><p>附图：</p><p><img src="//tvax3.sinaimg.cn/large/0081aNtNly1h5ptn1wkigj30zw0bpaik.jpg" alt="提取异或的数据"></p><p>这里的xor就是伪代码的最后一步异或处理，根据汇编它每次的值应该是吧存放在AL寄存器里，我们需要记录下来</p><p>数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data_xor[]=&#123;<br>        <span class="hljs-number">0xec</span>,<span class="hljs-number">0xcc</span>,<span class="hljs-number">0xf9</span>,<span class="hljs-number">0xfe</span>,<span class="hljs-number">0x4a</span>,<span class="hljs-number">0x4e</span>,<span class="hljs-number">0x51</span>,<span class="hljs-number">0x3e</span>,<span class="hljs-number">0x0b</span>,<br>        <span class="hljs-number">0x58</span>,<span class="hljs-number">0x0c</span>,<span class="hljs-number">0xa3</span>,<span class="hljs-number">0x4f</span>,<span class="hljs-number">0x94</span>,<span class="hljs-number">0xdb</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x2d</span>,<br>        <span class="hljs-number">0x5a</span>,<span class="hljs-number">0x8d</span>,<span class="hljs-number">0xa8</span>,<span class="hljs-number">0xda</span>,<span class="hljs-number">0x2c</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x5c</span>,<br>        <span class="hljs-number">0x8e</span>,<span class="hljs-number">0x16</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x1c</span>,<span class="hljs-number">0x18</span>,<span class="hljs-number">0x9d</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0xc7</span>,<span class="hljs-number">0xa8</span>,<br>        <span class="hljs-number">0xd0</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x8d</span>,<span class="hljs-number">0xe2</span>,<span class="hljs-number">0x51</span>,<span class="hljs-number">0x52</span><br>    &#125;;<br></code></pre></td></tr></table></figure><p>这里我为了和上面一致，把它写成了int数组</p><p>注：这样数据处理和输出的时候可能不太好搞，下次应该尽量搞成一个字节的</p><p>Mycode：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> data_xor[<span class="hljs-number">12</span>]=&#123;<br><span class="hljs-number">0xfef9ccec</span>,<span class="hljs-number">0x3e514e4a</span>,<span class="hljs-number">0xa30c580b</span>,<span class="hljs-number">0x09db944f</span>,<span class="hljs-number">0x8d5a2d05</span>,<span class="hljs-number">0x522cdaa8</span>,<span class="hljs-number">0x8e5c6862</span>,    <br><span class="hljs-number">0x181c0816</span>,<span class="hljs-number">0xa8c7679d</span>,<span class="hljs-number">0xe28d63d0</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x51</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="SUM值"><a href="#SUM值" class="headerlink" title="SUM值"></a>SUM值</h4><p>同样是也需要用动态调试下端点来查看</p><p><img src="//tva2.sinaimg.cn/large/0081aNtNly1h5pty4ja7zj30wp0aqgt4.jpg" alt="sum值"></p><p>这里通过看汇编可以知道需要看edi的值，跑完一轮32 次我们就可以拿到sum  sum&#x3D;0xc6ef3720</p><p>现在所有的数据和程序逻辑都明白了，只差编写解密程序，我是用c语言写的</p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">de_tea</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>* data)</span>                       <span class="hljs-comment">//TEA算法解密函数</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v[<span class="hljs-number">2</span>]= &#123;data[<span class="hljs-number">0</span>], data[<span class="hljs-number">1</span>]&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> DELTA= <span class="hljs-number">0x9e3779B9</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> k[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0x1234</span>, <span class="hljs-number">0x5678</span>, <span class="hljs-number">0x4523</span>, <span class="hljs-number">0x8265</span>&#125;;<br><span class="hljs-type">int</span> sum= <span class="hljs-number">0xC6EF3720</span>;<br><span class="hljs-type">int</span> i= <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(;i &lt; <span class="hljs-number">32</span>; ++i)<br>&#123;<br>v[<span class="hljs-number">1</span>] -= ((v[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">4</span>)+k[<span class="hljs-number">2</span>])^(sum+v[<span class="hljs-number">0</span>])^((v[<span class="hljs-number">0</span>]&gt;&gt;<span class="hljs-number">5</span>)+k[<span class="hljs-number">3</span>]);<br>v[<span class="hljs-number">0</span>] -= ((v[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">4</span>)+k[<span class="hljs-number">0</span>])^(sum+v[<span class="hljs-number">1</span>])^((v[<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">5</span>)+k[<span class="hljs-number">1</span>]);<span class="hljs-comment">// 执行32轮，算法中是递增，那么我们递减即可，算法特性我们不需要改公式中的内容</span><br>sum -= DELTA;<br>&#125;<br>data[<span class="hljs-number">0</span>]=v[<span class="hljs-number">0</span>];<br>data[<span class="hljs-number">1</span>]=v[<span class="hljs-number">1</span>];<br><br><span class="hljs-keyword">return</span>;<br><br>&#125;<br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i,k;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flag[<span class="hljs-number">11</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> data[<span class="hljs-number">12</span>]=&#123;<br><span class="hljs-number">0x1C30FE24</span>,<span class="hljs-number">0xA34C7D11</span>,<span class="hljs-number">0x6F106E38</span>,<span class="hljs-number">0x3EBDE0C4</span>,<span class="hljs-number">0x400FC847</span>,<br><span class="hljs-number">0x752FF41A</span>,<span class="hljs-number">0xF13DDEBA</span>,<span class="hljs-number">0x6C7835C6</span>,<span class="hljs-number">0xFD3E6948</span>,<span class="hljs-number">0x9DFD7447</span>,<br><span class="hljs-number">0x2F</span>,<span class="hljs-number">0x66</span><br>&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> data_xor[<span class="hljs-number">12</span>]=&#123;<br><span class="hljs-number">0xfef9ccec</span>,<span class="hljs-number">0x3e514e4a</span>,<span class="hljs-number">0xa30c580b</span>,<span class="hljs-number">0x09db944f</span>,<span class="hljs-number">0x8d5a2d05</span>,<span class="hljs-number">0x522cdaa8</span>,<span class="hljs-number">0x8e5c6862</span>,    <br><span class="hljs-number">0x181c0816</span>,<span class="hljs-number">0xa8c7679d</span>,<span class="hljs-number">0xe28d63d0</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x51</span><br>&#125;;<br><br><br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">12</span>;)<br>&#123;<br>de_tea(data+k);<br>k += <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)data);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++)                            <span class="hljs-comment">//RC4直接和拿到的异或数据再次异或即可</span><br>&#123;<br>data[i]^=data_xor[i];<br>flag[i]=data[i];<br>&#125;<br>flag[<span class="hljs-number">10</span>]=<span class="hljs-number">0x00000000</span>;                            <br>    <span class="hljs-comment">//这里是为了让前面几个完整的四字节数据输出成字符串，加一个末尾标识符</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)flag);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c%c\n&quot;</span>,<span class="hljs-number">0x66</span>^<span class="hljs-number">0x51</span>,<span class="hljs-number">0x2f</span>^<span class="hljs-number">0x52</span>);           <span class="hljs-comment">//直接将v26作为数组中最后一个元素最后会有一点点问题</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><span class="hljs-comment">//因为是个菜鸟，所以就把解密脚本写成了这样</span><br></code></pre></td></tr></table></figure><p>通过做这道题，初步学习了TEA和RC4算法，还是蛮有收获的。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/18/hello-world/"/>
    <url>/2022/10/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
